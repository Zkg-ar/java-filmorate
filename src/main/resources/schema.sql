CREATE TABLE IF NOT EXISTS users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(30) NOT NULL UNIQUE,
    login VARCHAR(30) NOT NULL,
    name VARCHAR(30) NOT NULL,
    birthday date
    );

CREATE TABLE IF NOT EXISTS friends
(
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    other_user_id INTEGER,
    FOREIGN KEY (other_user_id) REFERENCES users (id) ON DELETE CASCADE,
    is_confirm boolean
    );
select*from friends;
CREATE TABLE IF NOT EXISTS genre
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(30)
    );
CREATE TABLE IF NOT EXISTS mpa_rating
(
    mpa_rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa_rating_name VARCHAR(5)
    );

show tables;
CREATE TABLE IF NOT EXISTS films
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    description VARCHAR(200) NOT NULL,
    release_date date NOT NULL ,
    duration INTEGER,
    mpa_rating_id INTEGER,
    FOREIGN KEY (mpa_rating_id) REFERENCES mpa_rating (mpa_rating_id)
    );

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id INTEGER,
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    genre_id INTEGER,
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE CASCADE
    );

CREATE TABLE IF NOT EXISTS likes
(
    film_id INTEGER,
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    );

